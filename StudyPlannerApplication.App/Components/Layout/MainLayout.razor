@using MudBlazor
@using StudyPlannerApplication.App.StateContainer
@using StudyPlannerApplication.Domain.Features.Notification
@inherits LayoutComponentBase
@implements IDisposable
@inject NotificationService _notificationService
@inject NotificationStateContainer _notificationStateContainer
@inject ILogger<MainLayout> _logger
<MudThemeProvider />
<MudPopoverProvider />
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <MudMenu class="m-lg-2">
                <ActivatorContent>
                    <MudBadge Content="@_notificationStateContainer.NotificationCount"
                              Color="Color.Info"
                              Overlap="true"
                              Class="ml-2"
                              @onclick="@OnBadgeClick">
                        <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Success" />
                    </MudBadge>
                </ActivatorContent>
                <ChildContent>
                    @if (_notiData?.Data?.NotiList?.Any() == true)
                    {
                        foreach (var noti in _notiData.Data.NotiList)
                        {
                            <MudMenuItem>@noti.Message</MudMenuItem>
                        }
                    }
                </ChildContent>
            </MudMenu>
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    private bool _menuOpen = false;
    private UserSessionModel _userSession = new();
    private Result<NotificationResponseModel> _notiData = new();

    protected override void OnInitialized()
    {
        _notificationStateContainer.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity != null && !authState.User.Identity.IsAuthenticated)
                {
                    _nav.NavigateTo("/");
                    return;
                }
                _userSession = await customAuthStateProvider.GetUserData();
                await Notification();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                _logger.LogCustomError(ex);
            }
        }
    }


    public void Dispose()
    {
        _notificationStateContainer.OnChange -= StateHasChanged;
    }

    private async Task OnBadgeClick()
    {
        await Notification();
        StateHasChanged();
    }

    async Task Notification()
    {
        NotificationRequestModel reqModel = new NotificationRequestModel
            {
                CurrentUserId = _userSession.UserId
            };
        _notiData = await _notificationService.GetAllNotification(reqModel);
        if (!_notiData.Success)
        {
            await _injectService.ErrorMessage(_notiData.Message);
            return;
        }

        _notificationStateContainer.NotificationCount = _notiData.Data.NotiList.Count;
        //     await InvokeAsync(() =>
        // {
        //     _notificationStateContainer.NotificationCount = _notiData.Data.NotiList.Count;
        // });
    }

    private void Create()
    {
        StateHasChanged();
    }
}